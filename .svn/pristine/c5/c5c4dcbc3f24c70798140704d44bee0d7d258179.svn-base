package com.starsoft.oa.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.fileupload.util.Streams;
import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Property;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import com.starsoft.cms.task.UpLoadUtil;
import com.starsoft.core.controller.BaseAjaxController;
import com.starsoft.core.domain.OrganDomain;
import com.starsoft.core.domain.UsersDomain;
import com.starsoft.core.entity.Organ;
import com.starsoft.core.entity.Users;
import com.starsoft.core.util.HttpUtil;
import com.starsoft.core.util.Page;
import com.starsoft.core.util.StringUtil;
import com.starsoft.core.vo.FileUpload;
import com.starsoft.oa.domain.ChengbanDomain;
import com.starsoft.oa.domain.ChengbanRecordDomain;
import com.starsoft.oa.domain.FuyiDomain;
import com.starsoft.oa.domain.FuyiRecordDomain;
import com.starsoft.oa.domain.LianshenpiDomain;
import com.starsoft.oa.domain.MotionDomain;
import com.starsoft.oa.domain.QianpiRecordDomain;
import com.starsoft.oa.entity.Chengban;
import com.starsoft.oa.entity.ChengbanRecord;
import com.starsoft.oa.entity.Fuyi;
import com.starsoft.oa.entity.FuyiRecord;
import com.starsoft.oa.entity.Lianshenpi;
import com.starsoft.oa.entity.Motion;
import com.starsoft.oa.entity.QianpiRecord;

/**
 * 
 * @Description 议案控制器
 * @author 赵一好
 * @date 2016-11-8 下午5:34:05
 * 
 */
public class MotionController extends MyBaseAjaxController {

	@Autowired
	private OrganDomain organDomain;
	@Autowired
	private FuyiDomain fuyiDomain;
	@Autowired
	private JdbcTemplate jdbcTemplate;
	@Autowired
	private UsersDomain usersDomain;
	@Autowired
	private MotionDomain motionDomain;
	
	// 查询当前登录用户的的议案信息，跳转到list界面
	public ModelAndView list(HttpServletRequest req, HttpServletResponse resp)
			throws Exception {

		Map<String, Object> model = HttpUtil.convertModel(req);
		Users user = (Users) req.getSession().getAttribute("SESSONUSER");
		Page page = HttpUtil.convertPage(req);
		String sql = "select DISTINCT m.id,m.tname,m.createId,m.time,m.content,m.status,o.tname dept from t_oa_motion m LEFT JOIN t_oa_fuyirecord f on m.id = f.motionId LEFT JOIN t_core_user u on m.createId = u.id LEFT JOIN t_core_organ o on u.organId = o.id where m.createId = ? ORDER BY m.time desc LIMIT ?,?";
		List queryAll = jdbcTemplate.query(sql, new Object[] { user.getId(),page.getFirstResult(),page.getPageSize() },
				new RowMapper() {
					public Object mapRow(ResultSet rs, int i)
							throws SQLException {
						Motion motion = new Motion();
						motion.setTname(rs.getString("tname"));
						motion.setCreateId(rs.getString("createId"));
						motion.setTime(rs.getDate("time"));
						motion.setContent(rs.getString("content"));
						motion.setStatus(rs.getString("status"));
						motion.setId(rs.getString("id"));
						motion.setDept(rs.getString("dept"));
						return motion;
					}
				});
		if (queryAll.size() > 0) {
			DetachedCriteria criteria = super.convertCriteria(req);
			criteria.add(Restrictions.eq("createId", user.getId()));
			List queryByCriteria = this.baseDomain.queryByCriteria(criteria);
			page.setTotalCount(queryByCriteria.size());
			model.put("lists", queryAll);
		}
		model.put("page", page);
		// 查找总记录数
		return new ModelAndView(this.getListPage(), model);
	}

	// 跳转到编辑页面
	public ModelAndView add(HttpServletRequest req, HttpServletResponse resp)
			throws Exception {
		// 根据页面传来的id,查找出对应的信息，跳转到编辑页面
		String id = HttpUtil.getString(req, "id", "");
		Motion motion = (Motion) this.baseDomain.query(id);
		
		
		Map<String, Object> model = HttpUtil.convertModel(req);
		model.put("obj", motion);

		findMotRecs(id, model);
		

		// 查找附议人
		Users user = (Users) req.getSession().getAttribute("SESSONUSER");
		DetachedCriteria criteria = usersDomain.getCriteria(null);
		criteria.add(Restrictions.eq("organId", "005"));
		criteria.add(Restrictions.ne("id", user.getId()));
		List<Users> users = usersDomain.queryByCriteria(criteria);
		model.put("fyrs", users);

		// 从user表中查找出所有的上报人
		List qprs = usersDomain.queryByProperty("organId", "004");
		model.put("qprs", qprs);

		return new ModelAndView(this.getAddPage(), model);
	}

	

	// 跳转到添加提案页面
	public ModelAndView edit(HttpServletRequest req, HttpServletResponse resp)
			throws Exception {

		Map<String, Object> model = HttpUtil.convertModel(req);
		// 查找部门信息
		Users user = (Users) req.getSession().getAttribute("SESSONUSER");
		Organ organ = (Organ) organDomain.query(user.getOrganId());
		model.put("organ", organ);

		// 随机生成流水号和立案号
		// 先到数据库中查找所有议案信息
		DetachedCriteria c = super.convertCriteria(req);
		c.add(Restrictions.isNotNull("zlh"));
		c.addOrder(Property.forName("zlh").desc());
		List<Motion> motions = this.baseDomain.queryByCriteria(c);
		String zlh = "";
		if(motions.size()>0){
			zlh = motions.get(0).getZlh();
			String str = zlh.substring(3, zlh.length());
			zlh = "ZLH" + ((Long.parseLong(str) + 1)+"");
		}else{
			zlh = "ZLH" + StringUtil.generatorShort();
		}
		model.put("zlh", zlh);
		
		DetachedCriteria criteria = usersDomain.getCriteria(null);
		criteria.add(Restrictions.eq("organId", "005"));
		criteria.add(Restrictions.ne("id",user.getId()));
		List<Users> users = usersDomain.queryByCriteria(criteria);
		model.put("fyrs", users);
		return new ModelAndView(this.getEditPage(), model);
	}

	public ModelAndView save(HttpServletRequest req, HttpServletResponse resp)
			throws Exception {
		String fyr = HttpUtil.getString(req, "fyr", "");
		// 向motion中插入一条数据
		Motion motion = (Motion) this.baseDomain.getBaseObject();
		this.bind(req, motion);
		this.saveBaseInfoToObject(req, motion);
		motion.setTime(new Date());
		// 设置成未读状态
		/* motion.setMark("0"); */
		// 设置状态为0
		motion.setStatus("0");
		// 向操作记录表中插入一条记录
		Users user = (Users) req.getSession().getAttribute("SESSONUSER");
		//上传文件
		FileUpload entity=new FileUpload();
		bind(req, entity);
		String url=UpLoadUtil.myUpLoad(entity);
		if(!"".equals(url)){
			motion.setUrl(url);
		}
		
		motionDomain.saveMotAndRec(motion, user.getId(), fyr);
		return new ModelAndView("redirect:/motion.do");
	}

	// 新增附议人，向操作表中添加一条记录
	public void addFyr(HttpServletRequest req, HttpServletResponse resp)
			throws Exception {
		Fuyi fuyi = new Fuyi();
		fuyi.setCreateId(HttpUtil.getString(req, "createId", ""));
		fuyi.setTname("附议");
		fuyi.setMotionid(HttpUtil.getString(req, "id", ""));
		fuyi.setTime(new Date());
		fuyiDomain.save(fuyi);

	}

	// 查出所有的状态大于0的议案
	public ModelAndView pass(HttpServletRequest req, HttpServletResponse resp)
			throws Exception {
		Map<String, Object> model = HttpUtil.convertModel(req);
		String status = HttpUtil.getString(req, "status" , "0");
		//Users session_user = (Users) req.getSession().getAttribute("SESSONUSER");
		
		Page page = HttpUtil.convertPage(req);
		List<Motion> motions = motionDomain.queryMotionsByStatus(status,page);
		
		for (Motion motion : motions) {
			// 查找总票数
			String fyrNum = fuyiDomain.findFuyiCount(motion.getId(), null) + "";
			motion.setFyrNum(fyrNum);
			// 查找赞成的票数
			String agreeNum = fuyiDomain.findFuyiCount(motion.getId(), "1")
					+ "";
			motion.setAgreeNum(agreeNum);
		}
		page.setTotalCount(motionDomain.queryMotionsByStatus("7",null).size());
		model.put("lists", motions);
		model.put("page", page);
		return new ModelAndView(this.getCustomPage("pass"), model);
	}

	// 提案的多条件查询
	public ModelAndView find(HttpServletRequest req, HttpServletResponse resp)
			throws Exception {

		Map<String, Object> model = HttpUtil.convertModel(req);
		Map<String, String> map = new HashMap<String, String>();
		Page page = HttpUtil.convertPage(req);
		Enumeration<String> names = req.getParameterNames();
		while (names.hasMoreElements()) {
			String key = names.nextElement();
			String value = req.getParameter(key);
			if ("".equals(value)) {
				value = null;
			}
			map.put(key, value);
		}
		map.remove("action");

		Users user = (Users)req.getSession().getAttribute("SESSONUSER");
		String createId = user.getId();
		List<Motion> motions = motionDomain.queryMotionsByDync(map,page);
		for (Motion motion : motions) {
			// 查找总票数
			String fyrNum = fuyiDomain.findFuyiCount(motion.getId(), null) + "";
			motion.setFyrNum(fyrNum);
			// 查找赞成的票数
			String agreeNum = fuyiDomain.findFuyiCount(motion.getId(), "1")
					+ "";
			motion.setAgreeNum(agreeNum);
		}
		
		// 查找总记录数
		page.setTotalCount(motionDomain.queryMotionsByDync(map,null).size());
		model.put("lists", motions);
		model.put("page", page);
		return new ModelAndView("oa/motion/motionFind", model);
	}

	// 根据状态查找记录数
	public ModelAndView queryCountForStatus(HttpServletRequest req,
			HttpServletResponse resp) throws Exception {
		Map<String, Object> model = HttpUtil.convertModel(req);
		String status = HttpUtil.getString(req, "status", "");
		Users user = (Users)req.getSession().getAttribute("SESSONUSER");
		String msg = "";
		if (status != null && !status.equals("")) {
			// 查询记录数
			Integer c = motionDomain.queryCountForStatus(status,user.getId());
			model.put("status", c);
			return new ModelAndView("oa/info/infoIndex", model);
		} else {
			// 抛出异常
			msg = "操作失败，请重试!";
			model.put("msg", msg);
			return new ModelAndView("404.html");
		}
	}

	// 根据状态查找List
	public ModelAndView queryListForSta(HttpServletRequest req,
			HttpServletResponse resp) throws Exception {
		String status = HttpUtil.getString(req, "status","");
		Page page = HttpUtil.convertPage(req);
		DetachedCriteria criteria = super.convertCriteria(req);
		Map<String,Object> model = HttpUtil.convertModel(req);
		Users user = (Users) req.getSession().getAttribute("SESSONUSER");
		List<Motion> motions = new ArrayList<Motion>();
		if(status!=null&&!status.equals("")){
			criteria.add(Restrictions.eq("status", status));
			criteria.add(Restrictions.eq("createId", user.getId()));
			motions = this.baseDomain.queryByCriteria(criteria,page);
		}
		
		model.put("lists", motions);
		model.put("page", page);
		return new ModelAndView(this.getCustomPage("queryListForSta"),model);
	}
	public void update(HttpServletRequest req, HttpServletResponse resp)
			throws Exception {
	}

	public ModelAndView read(HttpServletRequest req, HttpServletResponse resp)
			throws Exception {
		return null;
	}

}
